name: build-test
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, edited, synchronize]
jobs:
  validate:
    name: Format and Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install upstream libseccomp
        run: sudo ./scripts/install_libseccomp.sh
      - name: Prepare for rustfmt and clippy
        run: rustup component add rustfmt clippy
      - name: Run rustfmt
        run: make fmt
      - name: Run clippy
        run: make clippy

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        libseccomp-version: [2.4.3, 2.5.1, 2.5.3]
    env:
      LIBSECCOMP_LINK_TYPE: dylib
      LIBSECCOMP_LIB_PATH: /usr/local/libseccomp/lib
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install upstream libseccomp
        run: |
          install_dir=$(dirname ${{ env.LIBSECCOMP_LIB_PATH }})
          sudo ./scripts/install_libseccomp.sh -v ${{ matrix.libseccomp-version }} -i ${install_dir}
          echo "LD_LIBRARY_PATH=${{ env.LIBSECCOMP_LIB_PATH }}" >> $GITHUB_ENV
      - name: Build crate
        run: make debug
      - name: Run test
        run: make test

  static-link-musl:
    name: Statically Linking with musl
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        libseccomp-version: [2.4.3, 2.5.1, 2.5.3]
        target:
          - x86_64-unknown-linux-musl
    env:
      LIBSECCOMP_LINK_TYPE: static
      LIBSECCOMP_LIB_PATH: /usr/local/libseccomp-musl/lib
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}
      - name: Install musl gcc
        run: sudo apt-get install musl-tools
      - name: Install upstream libseccomp
        run: |
          install_dir=$(dirname ${{ env.LIBSECCOMP_LIB_PATH }})
          sudo ./scripts/install_libseccomp.sh -m -v ${{ matrix.libseccomp-version }} -i ${install_dir}
      - name: Build crate
        run: cargo build --target ${{ matrix.target }}
      - name: Run test
        run: cargo test --target ${{ matrix.target }} -- --nocapture --test-threads 1

  doc:
    name: Documentation Check
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: -Dwarnings
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate documentations
        run: cargo doc --no-deps

  codespell:
    name: Check Spelling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install codespell
        run: pip install codespell
      - name: Run codespell
        run: codespell --ignore-words-list crate

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - all-features
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install upstream libseccomp
        run: sudo ./scripts/install_libseccomp.sh
      - name: Run cargo tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: '--${{ matrix.features }} -- --test-threads 1'
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
